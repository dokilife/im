// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: service_im.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IMClient is the client API for IM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IMClient interface {
	GetMessageStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (IM_GetMessageStreamClient, error)
	CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*CreateMessageResponse, error)
}

type iMClient struct {
	cc grpc.ClientConnInterface
}

func NewIMClient(cc grpc.ClientConnInterface) IMClient {
	return &iMClient{cc}
}

func (c *iMClient) GetMessageStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (IM_GetMessageStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &IM_ServiceDesc.Streams[0], "/pb.IM/GetMessageStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &iMGetMessageStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IM_GetMessageStreamClient interface {
	Recv() (*GetMessageStreamResponse, error)
	grpc.ClientStream
}

type iMGetMessageStreamClient struct {
	grpc.ClientStream
}

func (x *iMGetMessageStreamClient) Recv() (*GetMessageStreamResponse, error) {
	m := new(GetMessageStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iMClient) CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*CreateMessageResponse, error) {
	out := new(CreateMessageResponse)
	err := c.cc.Invoke(ctx, "/pb.IM/CreateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IMServer is the server API for IM service.
// All implementations must embed UnimplementedIMServer
// for forward compatibility
type IMServer interface {
	GetMessageStream(*emptypb.Empty, IM_GetMessageStreamServer) error
	CreateMessage(context.Context, *CreateMessageRequest) (*CreateMessageResponse, error)
	mustEmbedUnimplementedIMServer()
}

// UnimplementedIMServer must be embedded to have forward compatible implementations.
type UnimplementedIMServer struct {
}

func (UnimplementedIMServer) GetMessageStream(*emptypb.Empty, IM_GetMessageStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMessageStream not implemented")
}
func (UnimplementedIMServer) CreateMessage(context.Context, *CreateMessageRequest) (*CreateMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedIMServer) mustEmbedUnimplementedIMServer() {}

// UnsafeIMServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IMServer will
// result in compilation errors.
type UnsafeIMServer interface {
	mustEmbedUnimplementedIMServer()
}

func RegisterIMServer(s grpc.ServiceRegistrar, srv IMServer) {
	s.RegisterService(&IM_ServiceDesc, srv)
}

func _IM_GetMessageStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IMServer).GetMessageStream(m, &iMGetMessageStreamServer{stream})
}

type IM_GetMessageStreamServer interface {
	Send(*GetMessageStreamResponse) error
	grpc.ServerStream
}

type iMGetMessageStreamServer struct {
	grpc.ServerStream
}

func (x *iMGetMessageStreamServer) Send(m *GetMessageStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _IM_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.IM/CreateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMServer).CreateMessage(ctx, req.(*CreateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IM_ServiceDesc is the grpc.ServiceDesc for IM service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IM_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.IM",
	HandlerType: (*IMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMessage",
			Handler:    _IM_CreateMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMessageStream",
			Handler:       _IM_GetMessageStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service_im.proto",
}
